generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                         String     @id
  email                      String     @unique
  createdAt                  DateTime   @default(now()) @map("created_at")
  updatedAt                  DateTime   @updatedAt @map("updated_at")
  instagramAccessToken       String?    @map("instagram_access_token")
  instagramBusinessAccountId String?    @map("instagram_business_account_id")
  instagramTokenExpiresAt    DateTime?  @map("instagram_token_expires_at")
  facebookPageId             String?    @map("facebook_page_id")
  facebookPageAccessToken    String?    @map("facebook_page_access_token")
  xAccessToken               String?    @map("x_access_token")
  xAccessTokenSecret         String?    @map("x_access_token_secret")
  xUserId                    String?    @map("x_user_id")
  xUsername                  String?    @map("x_username")
  threadsAccessToken         String?    @map("threads_access_token")
  threadsUserId              String?    @map("threads_user_id")
  threadsTokenExpiresAt      DateTime?  @map("threads_token_expires_at")
  posts                      Post[]
  schedules                  Schedule[]

  @@map("users")
}

model Post {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  order           Int             @default(0)
  storyText       String?         @map("story_text")
  images          PostImage[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduleEntries ScheduleEntry[]
  schedulePosts   SchedulePost[]

  @@map("posts")
}

model PostImage {
  id          String   @id @default(cuid())
  postId      String   @map("post_id")
  imageUrl    String   @map("image_url")
  fileName    String   @map("file_name")
  fileSize    Int      @map("file_size")
  mimeType    String   @map("mime_type")
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  threadsText String?  @map("threads_text")
  xText       String?  @map("x_text")
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_images")
}

model Registration {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("registrations")
}

model Schedule {
  id            String          @id @default(cuid())
  userId        String          @map("user_id")
  name          String
  strategy      PostingStrategy
  scope         PostingScope
  rrule         String?
  timezone      String          @default("Asia/Tokyo")
  nextRun       DateTime?       @map("next_run")
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  autoReset     Boolean         @default(true) @map("auto_reset")
  lastResetAt   DateTime?       @map("last_reset_at")
  resetCount    Int             @default(0) @map("reset_count")
  entries       ScheduleEntry[]
  selectedPosts SchedulePost[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model ScheduleEntry {
  id           String         @id @default(cuid())
  scheduleId   String?        @map("schedule_id")
  postId       String         @map("post_id")
  scheduledAt  DateTime       @map("scheduled_at")
  status       ScheduleStatus @default(PENDING)
  postedAt     DateTime?      @map("posted_at")
  errorMessage String?        @map("error_message")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  schedule     Schedule?      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, scheduledAt])
  @@index([scheduledAt])
  @@index([status])
  @@map("schedule_entries")
}

model SchedulePost {
  id         String   @id @default(cuid())
  scheduleId String   @map("schedule_id")
  postId     String   @map("post_id")
  createdAt  DateTime @default(now()) @map("created_at")
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, postId])
  @@map("schedule_posts")
}

enum PostingStrategy {
  RANDOM
  NEWEST_FIRST
  OLDEST_FIRST
}

enum PostingScope {
  ALL
  SELECTED
}

enum ScheduleStatus {
  PENDING
  POSTED
  FAILED
  CANCELED
}
